generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Category {
    id            String         @id
    icon          String?
    sortOrder     Int            @default(0)
    name          String
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    i18n          CategoryI18n[]
    subcategories Subcategory[]
}

model CategoryI18n {
    id          Int      @id @default(autoincrement())
    categoryId  String
    locale      String   @db.VarChar(8)
    name        String   @db.VarChar(255)
    description String?  @db.Text
    category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

    @@unique([categoryId, locale], name: "uq_category_i18n")
}

model Subcategory {
    id         Int               @id @default(autoincrement())
    categoryId String
    slug       String            @db.VarChar(128)
    icon       String?           @db.VarChar(16)
    sortOrder  Int               @default(0)
    name       String?
    createdAt  DateTime          @default(now())
    updatedAt  DateTime          @updatedAt
    category   Category          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    i18n       SubcategoryI18n[]
    questions  Question[]

    @@unique([categoryId, slug], name: "uq_subcategory_cat_slug")
}

model SubcategoryI18n {
    id            Int     @id @default(autoincrement())
    subcategoryId Int
    locale        String  @db.VarChar(8)
    name          String  @db.VarChar(255)
    description   String? @db.Text

    subcategory Subcategory @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)

    @@unique([subcategoryId, locale], name: "uq_subcategory_i18n")
}

model User {
    id        Int      @id @default(autoincrement())
    email     String   @unique
    password  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    tokens    Token[]
    username  String?  @unique
    answers   Answer[]
}

model Token {
    id                    Int      @id @default(autoincrement())
    userId                Int
    user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt             DateTime @default(now())
    refreshedAt           DateTime @updatedAt
    accessToken           String   @unique
    refreshToken          String   @unique
    expiresAtAccessToken  DateTime
    expiresAtRefreshToken DateTime
}

model Company {
    id            Int      @id @default(autoincrement())
    name          String
    email         String   @unique
    description   String?
    website       String?
    phone         String?
    address       String?
    city          String?
    country       String?
    postalCode    String?
    employeeCount Int?     @default(0)
    status        String   @default("active")
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}

model Question {
    id            Int     @id @default(autoincrement())
    subcategoryId Int
    type          String
    required      Boolean
    sortOrder     Int
    validation    String?
    isActive      Boolean @default(true)

    subcategory  Subcategory           @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
    options      Option[]
    translations QuestionTranslation[]
    answers      Answer[]
}

model QuestionTranslation {
    id          Int     @id @default(autoincrement())
    questionId  Int
    locale      String  @db.VarChar(8)
    label       String
    description String?

    question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

    @@unique([questionId, locale])
}

model Option {
    id         Int      @id @default(autoincrement())
    value      String
    questionId Int
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

    translations OptionTranslation[]
    answers      Answer[]
}

model OptionTranslation {
    id       Int    @id @default(autoincrement())
    optionId Int
    locale   String @db.VarChar(8)
    label    String

    option Option @relation(fields: [optionId], references: [id], onDelete: Cascade)

    @@unique([optionId, locale])
}

model Answer {
    id            Int       @id @default(autoincrement())
    userId        Int
    questionId    Int
    optionId      Int?
    textValue     String?
    numberValue   Float?
    dateValue     DateTime?
    inputLanguage String?   @db.VarChar(8) // "en", "fr" vs.
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    option   Option?  @relation(fields: [optionId], references: [id], onDelete: SetNull)

    @@unique([userId, questionId, optionId], name: "unique_user_question_option")
    @@index([userId])
    @@index([questionId])
}
