generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql" // postgresql | sqlite | mysql
    url      = "postgresql://neondb_owner:npg_yUhiR5YxcQD9@ep-wild-bonus-a9w5sjg0-pooler.gwc.azure.neon.tech:5432/neondb"
}

model Category {
    id            String         @id
    icon          String?        @map("icon")
    sortOrder     Int            @default(0) @map("sortOrder")
    name          String         @map("name")
    createdAt     DateTime       @default(now()) @map("createdAt")
    updatedAt     DateTime       @updatedAt @map("updatedAt")
    i18n          CategoryI18n[]
    subcategories Subcategory[]
}

model CategoryI18n {
    id          Int      @id @default(autoincrement())
    categoryId  String
    locale      String   @db.VarChar(8)
    name        String   @db.VarChar(255)
    description String?  @db.Text
    category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

    @@unique([categoryId, locale], name: "uq_category_i18n")
}

model Subcategory {
    id         Int               @id @default(autoincrement())
    categoryId String
    slug       String            @db.VarChar(128)
    icon       String?           @db.VarChar(16)
    sortOrder  Int               @default(0)
    name       String?
    createdAt  DateTime          @default(now())
    updatedAt  DateTime          @updatedAt
    category   Category          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    i18n       SubcategoryI18n[]
    questions  Question[]

    @@unique([categoryId, slug], name: "uq_subcategory_cat_slug")
}

model SubcategoryI18n {
    id            Int     @id @default(autoincrement())
    subcategoryId Int
    locale        String  @db.VarChar(8)
    name          String  @db.VarChar(255)
    description   String? @db.Text

    subcategory Subcategory @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)

    @@unique([subcategoryId, locale], name: "uq_subcategory_i18n")
}

model User {
    id        Int            @id @default(autoincrement())
    email     String         @unique
    password  String
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt
    tokens    Token[]
    username  String?        @unique
    responses UserResponse[]
}

model Token {
    id                    Int      @id @default(autoincrement())
    userId                Int
    user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt             DateTime @default(now())
    refreshedAt           DateTime @updatedAt
    accessToken           String   @unique
    refreshToken          String   @unique
    expiresAtAccessToken  DateTime
    expiresAtRefreshToken DateTime
}

model Company {
    id            Int      @id @default(autoincrement())
    name          String
    email         String   @unique
    description   String?
    website       String?
    phone         String?
    address       String?
    city          String?
    country       String?
    postalCode    String?
    employeeCount Int?     @default(0)
    status        String   @default("active")
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}

model Question {
    id            Int            @id @default(autoincrement())
    subcategoryId Int
    type          String         @db.VarChar(50) // text, textarea, select, multiselect, radio, checkbox, number, email, phone, date, file
    required      Boolean        @default(false)
    sortOrder     Int            @default(0)
    options       Json? // For select, multiselect, radio, checkbox - stores array of options
    validation    Json? // For validation rules (min, max, regex, etc.)
    isActive      Boolean        @default(true)
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    subcategory   Subcategory    @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
    i18n          QuestionI18n[]
    responses     UserResponse[]

    @@index([subcategoryId, sortOrder])
}

model QuestionI18n {
    id          Int      @id @default(autoincrement())
    questionId  Int
    locale      String   @db.VarChar(8)
    title       String   @db.VarChar(500)
    description String?  @db.Text
    placeholder String?  @db.VarChar(255)
    question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

    @@unique([questionId, locale], name: "uq_question_i18n")
}

model UserResponse {
    id         Int      @id @default(autoincrement())
    userId     Int? // Optional - for anonymous responses
    questionId Int
    sessionId  String?  @db.VarChar(255) // For tracking anonymous user sessions
    answer     Json // Stores the user's answer (can be string, number, array, etc.)
    ipAddress  String?  @db.VarChar(45)
    userAgent  String?  @db.Text
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([questionId])
    @@index([sessionId])
    @@index([createdAt])
}
